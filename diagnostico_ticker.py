#!/usr/bin/env python3
"""
Script de diagn√≥stico para el endpoint de detalle de tickers
"""
import requests
import json

BASE_URL = "http://localhost:8000"

def test_ticker_detail():
    print("üîç DIAGN√ìSTICO DEL ENDPOINT DE DETALLE DE TICKERS")
    print("=" * 50)
    
    # Lista de tickers para probar
    tickers = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT"]
    
    for ticker in tickers:
        print(f"\nüìä Probando: {ticker}")
        print("-" * 30)
        
        try:
            # Probar endpoint de detalle
            url = f"{BASE_URL}/reporting/detalle/{ticker}"
            print(f"URL: {url}")
            
            response = requests.get(url, timeout=10)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Respuesta exitosa")
                print(f"   - S√≠mbolo: {data.get('simbolo', 'N/A')}")
                print(f"   - Total recomendaciones: {data.get('metricas_generales', {}).get('total_recomendaciones', 'N/A')}")
                print(f"   - Precisi√≥n: {data.get('metricas_generales', {}).get('precision', 'N/A')}")
            else:
                print(f"‚ùå Error HTTP: {response.status_code}")
                print(f"   Respuesta: {response.text[:200]}...")
                
        except requests.exceptions.Timeout:
            print("‚ùå Timeout - El servidor tard√≥ demasiado en responder")
        except requests.exceptions.ConnectionError:
            print("‚ùå Error de conexi√≥n - No se puede conectar al servidor")
        except Exception as e:
            print(f"‚ùå Error inesperado: {str(e)}")
            print(f"   Tipo de error: {type(e).__name__}")

def test_recommendation_endpoint():
    print("\n\nüéØ PROBANDO ENDPOINT DE RECOMENDACI√ìN")
    print("=" * 40)
    
    try:
        # Probar endpoint de recomendaci√≥n
        url = f"{BASE_URL}/binance/recommendation/BTCUSDT"
        print(f"URL: {url}")
        
        response = requests.get(url, timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Recomendaci√≥n exitosa")
            print(f"   - Recomendaci√≥n: {data.get('recomendacion', 'N/A')}")
            print(f"   - Horizonte: {data.get('horizonte', 'N/A')}")
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(f"   Respuesta: {response.text[:200]}...")
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

def test_server_status():
    print("\n\nüè• ESTADO DEL SERVIDOR")
    print("=" * 25)
    
    try:
        # Probar endpoint b√°sico
        response = requests.get(f"{BASE_URL}/docs", timeout=5)
        print(f"‚úÖ Servidor respondiendo - Status: {response.status_code}")
        
        # Probar endpoint de health check si existe
        try:
            response = requests.get(f"{BASE_URL}/health", timeout=5)
            print(f"‚úÖ Health check - Status: {response.status_code}")
        except:
            print("‚ÑπÔ∏è  No hay endpoint de health check")
            
    except Exception as e:
        print(f"‚ùå Servidor no responde: {str(e)}")

if __name__ == "__main__":
    test_server_status()
    test_recommendation_endpoint()
    test_ticker_detail()
    
    print("\n" + "=" * 50)
    print("üìã RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 50)
    print("Si ves errores arriba, estos son los problemas m√°s comunes:")
    print("1. ‚ùå Servidor no est√° corriendo")
    print("2. ‚ùå Error en la base de datos")
    print("3. ‚ùå Error en el c√≥digo del endpoint")
    print("4. ‚ùå Problema de permisos o archivos")
    print("\nüí° Copia y pega los errores espec√≠ficos para m√°s ayuda.") 