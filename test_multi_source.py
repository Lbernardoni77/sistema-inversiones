#!/usr/bin/env python3
"""
Script de prueba para verificar que las m√∫ltiples fuentes de datos est√©n funcionando
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_multi_source():
    """Prueba las m√∫ltiples fuentes de datos"""
    print("üß™ Probando m√∫ltiples fuentes de datos...")
    
    try:
        from backend.services.multi_source_service import MultiSourceService
        from backend.services.binance_service import get_recommendation
        
        # Crear instancia del servicio
        multi_source = MultiSourceService()
        
        # Probar obtenci√≥n de precio
        print("\nüìä Probando obtenci√≥n de precio...")
        price_data = multi_source.get_price("BTCUSDT", "1d")
        print(f"Precio BTCUSDT: {price_data}")
        
        # Probar recomendaci√≥n con m√∫ltiples fuentes
        print("\nüéØ Probando recomendaci√≥n con m√∫ltiples fuentes...")
        recommendation = get_recommendation("BTCUSDT", "24h")
        print(f"Recomendaci√≥n BTCUSDT: {recommendation.get('recomendacion', 'Error')}")
        
        # Verificar que se est√©n usando las prioridades din√°micas
        print("\nüìã Verificando prioridades din√°micas...")
        priorities = multi_source.load_source_priorities()
        print(f"Orden de prioridades: {priorities}")
        
        print("\n‚úÖ Todas las pruebas pasaron correctamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        return False

if __name__ == "__main__":
    test_multi_source()
